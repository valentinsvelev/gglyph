[{"path":"https://valentinsvelev.github.io/gglyph/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Valentin Velev Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/LICENSE.html","id":"data-license","dir":"","previous_headings":"","what":"Data License","title":"MIT License","text":"datasets included package (data/ directory) licensed Creative Commons Attribution 4.0 International (CC 4.0) license. free share adapt data purpose, even commercially, provided give appropriate credit, provide link license, indicate changes made. Full license text: https://creativecommons.org/licenses//4.0/","code":""},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"the-package","dir":"Articles","previous_headings":"","what":"The Package","title":"A guide on how to use the package gglyph","text":"gglyph package creating directed network-style graphs statistical non-statistical data custom edges. builds ggplot2 includes three functions: geom_glyph(): Create network-based graph illustrates pairwise relationships (statistical non-statistical) using custom edges, process_data_statistical(): Process statistical data (e.g., pairwise t-tests) plotting, process_data_general(): Process general / non-statistical data (data directional relationships) plotting. package also includes two datasets: PISA 2022: Programme International Student Assessment (PISA) global evaluation study conducted Organisation Economic Co-operation Development (OECD) assesses scholastic performance 15-year-old students reading, math, science. held every three years provides comparative data countries understand improve education systems. SIPRI Military Expenditure Database: Stockholm International Peace Research Institute (SIPRI) Military Expenditure Database comprises panel data amount financial resources dedicated state raising maintaining state’s armed forces. database includes data local currencies, constant (2022) current US dollars, share gross domestic product (GDP), per capita. following chapter, illustrate main function geom_glyph() works arguments related common ggplot2 arguments.","code":""},{"path":[]},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"basics","dir":"Articles","previous_headings":"The Plotting Function","what":"Basics","title":"A guide on how to use the package gglyph","text":"begin , created table table showing equivalence geom_glyph() arguments common ggplot2 arguments. Table 1: Equivalence geom_glyph ggplot2 arguments","code":""},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"some-examples","dir":"Articles","previous_headings":"The Plotting Function","what":"Some Examples","title":"A guide on how to use the package gglyph","text":"Now set vignette: create mock data using custom function generate_mock_data(), comprises several arguments listed Table 2: Table 2: Arguments generate_mock_data function can used want just play around geom_glyph(). can used: data can directly passed geom_glyph() must look like (chapter data wrangling functions): Table 3: Ungrouped data geom_glyph Table 4: Grouped data geom_glyph data can plot basic glyphs using previously generated mock data:   Note function works well 9 nodes:  style plots first used paper, plots painstakingly created manually Photoshop. Now package ;).","code":"# Load packages library(gglyph) library(tidyverse) library(readr) library(haven) library(purrr) library(viridisLite) library(kableExtra) library(patchwork) library(ggthemes)  # Remove scientific notation options(scipen = 999, digits = 3)  # Set seed for reproducibility set.seed(42) mock_data <- generate_mock_data(n_nodes = 5, n_edges = 10, statistical = TRUE) mock_data_grouped <- generate_mock_data(n_nodes = 5, n_edges = 10, n_groups = 3, statistical = TRUE) # Non-grouped ggplot(data = mock_data) +   geom_glyph() # Grouped ggplot(data = mock_data_grouped) +   geom_glyph() +   facet_wrap(~ group) plot_list <- list()  for (num_nodes in 3:9) {   data <- generate_mock_data(n_nodes = num_nodes, n_edges = num_nodes * 5, statistical = TRUE)   p <- ggplot(data = data) +     geom_glyph(label_size = 9, node_size = 0.5)   plot_list[[length(plot_list) + 1]] <- p }  final_grid <- wrap_plots(plot_list, ncol = 2) final_grid"},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"some-prettier-examples-well-depends-on-the-eye-of-the-beholder","dir":"Articles","previous_headings":"The Plotting Function","what":"Some Prettier Examples… Well, depends on the eye of the beholder","title":"A guide on how to use the package gglyph","text":"plots can also improved aesthetically using arguments Table 1. illustrate, use mock data created earlier. First, can change fill color nodes edges. Note edge node outline colour provided fill colour, outline colour used . also applies fill colour provided outline colour. Furthermore, use colour function viridis manually set scale_*_manual() (), always get default legend (black nodes grey edge).   Next, can change outline color nodes edges:   , can change size nodes edges:   , can change transparency nodes edges well spacing nodes:   shape nodes can also changed. Click list ggplot2 shapes.   addition, size labels can changed:   Similarly, legend title subtitle can changed:   Finally, can use standard ggplot2 functions + change certain aspects appearance. Note like use ggplot2’s scale_*_manual() faceted plot, need specify grouping variable mapping argument ggplot(). , scale_colour_manual() scale_fill_manual() apply edges scale_shape_manual() nodes. Furthermore, data 6 groups manually specify different shapes using scale_shape_manual() warning: appear. can safely ignored.   Please note manually set colour, fill, shape, use corresponding geom_glyph() argument. following chapter, briefly go two functions data wrangling demonstrate together two datasets can used create glyphs.","code":"# Non-grouped ggplot(data = mock_data) +   geom_glyph(node_fill = \"purple\", edge_fill = \"purple\") # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(node_fill = viridis, edge_fill = viridis) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     edge_colour = \"black\",     edge_fill = \"purple\"   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = viridis,     edge_colour = \"black\",     edge_fill = viridis   ) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75   ) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5   ) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5   ) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 14   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 10,     group_label_size = 15   ) +   facet_wrap(~ group) # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 14,     legend_title = \"Legend Title\",     legend_subtitle = \"Legend Subtitle\"   ) # Grouped ggplot(data = mock_data_grouped) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 10,     group_label_size = 15,     legend_title = \"Legend Title\",     legend_subtitle = \"Legend Subtitle\"   ) +   facet_wrap(~ group) Warning message: The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes difficult to discriminate ℹ you have requested 9 values. Consider specifying shapes manually if you need that many have them. # Non-grouped ggplot(data = mock_data) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     node_shape = 24,     edge_colour = \"black\",     edge_fill = \"purple\",     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 14,     legend_title = \"Legend Title\",     legend_subtitle = \"Legend Subtitle\"   ) +   labs(title = \"Very Creative Title\") +   theme(     legend.box.margin = margin(l = 20, r = 20),     strip.background = element_rect(fill = \"white\", color = \"black\", linewidth = 0.5)   ) # Grouped ggplot(data = mock_data_grouped, aes(colour = group, fill = group, shape = group)) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     node_size = 0.5,     node_alpha = 0.5,     node_spacing = 0.5,     edge_size = 0.75,     edge_alpha = 0.5,     label_size = 10,     group_label_size = 15,     legend_title = \"Legend Title\",     legend_subtitle = \"Legend Subtitle\"   ) +   facet_wrap(~ group) +   labs(title = \"Very Creative Title\") +   scale_color_manual(values = c(\"Group 1\" = \"black\", \"Group 2\" = \"green\", \"Group 3\" = \"blue\")) +   scale_fill_manual(values = c(\"Group 1\" = \"red\", \"Group 2\" = \"black\", \"Group 3\" = \"yellow\")) +   scale_shape_manual(values = c(\"Group 1\" = 22, \"Group 2\" = 23, \"Group 3\" = 24)) +   theme(     legend.box.margin = margin(l = 20, r = 20),     strip.background = element_rect(fill = \"white\", color = \"black\", linewidth = 0.5)   )"},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"the-data-wrangling-functions","dir":"Articles","previous_headings":"","what":"The Data Wrangling Functions","title":"A guide on how to use the package gglyph","text":"mentioned , gglyph includes two functions data wrangling process_data_statistical process_data_general. table , listed different arguments function. Table 5: Arguments process_data_statistical process_data_general illustrate raw data processed using process_data_statistical process_data_general, use two datasets gglyph show “”. First, load wrangle datasets included package (see chapter datasets). PISA 2022 dataset, use country variable (CNT), variable indicating highest educational level attainment either parent (HISCED), average score math comprehension items (PV*MATH). SIPRI dataset, use absolute amount military expenditures current US dollars. Now, conduct statistical analyses (grouped pairwise t-tests) using (subset ) PISA 2022 dataset. resulting objects DataFrames nested lists, meaning need transformed:  “raw” datasets henceforth work look like: Table 6: Raw statistical data (PISA) Table 7: Raw non-statistical data (SIPRI MilEx) Compared using functions process_data_statistical() process_data_general(): processed datasets look like: (Note: show PISA dataset) Table 8: Processed ungrouped statistical data Table 9: Processed grouped statistical data data following plots can created:   SIPRI dataset:   bit polishing, can look like :   SIPRI dataset:","code":"# Load both datasets data(\"pisa2022_subset\") data(\"sipri_milex1949_2023_subset\")  # Wrangle the SIPRI dataset 1/2 country_pairs <- expand.grid(   Year  = c(1995, 1999, 2003, 2007, 2011, 2015, 2019, 2023),   Country1 = unique(sipri_milex1949_2023_subset$Country),   Country2 = unique(sipri_milex1949_2023_subset$Country)   ) %>%   filter(Country1 != Country2) %>%   rowwise() %>%   filter(as.character(Country1) < as.character(Country2))  # Wrangle the SIPRI dataset 2/2 sipri_dat_plot <- left_join(country_pairs, sipri_milex1949_2023_subset, by = c(\"Country1\" = \"Country\", \"Year\")) %>%   dplyr::rename(Spending_Country1 = Spending) %>%   left_join(sipri_milex1949_2023_subset, by = c(\"Country2\" = \"Country\", \"Year\")) %>%   dplyr::rename(Spending_Country2 = Spending) %>%   filter(Spending_Country1 > 5000 & Spending_Country2 > 5000) %>%   mutate(     Start = case_when(       Spending_Country1 > Spending_Country2 ~ Country1,       Spending_Country1 < Spending_Country2 ~ Country2     ),     End = case_when(       Spending_Country1 > Spending_Country2 ~ Country2,       Spending_Country1 < Spending_Country2 ~ Country1     )) # Direction: significantly less than pisa2022_ttest_less <- pisa2022_subset %>%   group_by(CNT) %>%   summarise(     results = list(       pairwise.t.test(         x = MATH,         g = HISCED,         p.adjust.method = \"bonferroni\",         alternative = \"less\"       )     ),     .groups = \"drop\"   )  # Direction: significantly greater than pisa2022_ttest_greater <- pisa2022_subset %>%   group_by(CNT) %>%   summarise(     results = list(       pairwise.t.test(         x = MATH,         g = HISCED,         p.adjust.method = \"bonferroni\",         alternative = \"greater\"       )     ),     .groups = \"drop\"   ) # Function for tidying up the statistical analysis results ttests_to_long <- function(ttests, group) {   ttests %>%     rowwise() %>%     mutate(       p_value_matrix = list(         if (!is.null(results) && !is.null(results$p.value)) results$p.value else NULL       )     ) %>%     filter(!is.null(p_value_matrix)) %>%     mutate(       tidy_results = list(as.data.frame(as.table(p_value_matrix)))     ) %>%     unnest(cols = tidy_results) %>%     rename(country = group, p_value = Freq) %>%     dplyr::select(country, cat1 = Var1, cat2 = Var2, p_value) }  # Tidy up PISA pisa2022_ttests <- bind_rows(   ttests_to_long(ttests = pisa2022_ttest_less, group = \"CNT\") %>%     drop_na(p_value) %>%     mutate(direction = \"less\"),   ttests_to_long(ttests = pisa2022_ttest_greater, group = \"CNT\") %>%     drop_na(p_value) %>%     mutate(direction = \"greater\")   ) %>%   mutate(     start = ifelse(direction == \"less\", cat1, cat2),     end = ifelse(direction == \"less\", cat2, cat1)   ) # Process the PISA data (statistical data) ## Grouped data processed_data_pisa_group <- process_data_statistical(   data = pisa2022_ttests,   from = \"cat1\",   to = \"cat2\",   sig = \"p_value\",   group = \"country\",   thresh = 0.05 )  ## Non-grouped data processed_data_pisa <- process_data_statistical(   data = pisa2022_ttests[pisa2022_ttests$country == \"Germany\",],   from = \"cat1\",   to = \"cat2\",   sig = \"p_value\",   thresh = 0.05 )  # Process the SIPRI MilEx data (non-statistical data) ## Grouped data processed_data_sipri_group <- process_data_general(   data = sipri_dat_plot,   from = \"Start\",   to = \"End\",   group = \"Year\" )  ## Non-grouped data processed_data_sipri <- process_data_general(   data = sipri_dat_plot[sipri_dat_plot$Year == \"2023\",],   from = \"Start\",   to = \"End\" ) ggplot(data = processed_data_pisa) +   geom_glyph() ggplot(data = processed_data_pisa_group) +   geom_glyph() +   facet_wrap(~ group) ggplot(data = processed_data_sipri) +   geom_glyph() ggplot(data = processed_data_sipri_group) +   geom_glyph() +   facet_wrap(~ group) ggplot(data = processed_data_pisa) +   geom_glyph(     node_colour = \"black\",     edge_colour = \"orange\"   ) +   labs(title = \"PISA 2022 Parental Education\") ggplot(data = processed_data_pisa_group) +   geom_glyph(     node_fill = rainbow,     node_colour = \"black\",     edge_fill = rainbow,     label_size = 3.75   ) +   facet_wrap(~ group) +   labs(title = \"PISA 2022 Parental Education\") ggplot(data = processed_data_sipri) +   geom_glyph(     node_colour = \"black\",     node_fill = \"purple\",     edge_fill = \"blue\"   ) +   labs(title = \"SIPRI Military Expenditures\") ggplot(data = processed_data_sipri_group) +   geom_glyph(     node_fill = viridis,     node_colour = \"black\",     edge_fill = viridis   ) +   facet_wrap(~ group) +   labs(title = \"SIPRI Military Expenditures\")"},{"path":"https://valentinsvelev.github.io/gglyph/articles/gglyph.html","id":"concluding-remarks","dir":"Articles","previous_headings":"","what":"Concluding Remarks","title":"A guide on how to use the package gglyph","text":"can save plot using ggsave() ggplot2: Finally, find bugs additional features like add, please let know valentin.velev@uni-konstanz.de.","code":"ggsave(filename = \"plot.pdf\", plot = last_plot(), width = 8, height = 6, dpi = 300)"},{"path":"https://valentinsvelev.github.io/gglyph/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Valentin Velev. Maintainer, author. Andreas Spitz. Contributor.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Velev V (2025). gglyph: Network-Style Visualization Directed Pairwise Relationships. R package version 0.0.0.9000, https://valentinsvelev.github.io/gglyph.","code":"@Manual{,   title = {gglyph: Network-Style Visualization Of Directed Pairwise Relationships},   author = {Valentin Velev},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://valentinsvelev.github.io/gglyph}, }"},{"path":"https://valentinsvelev.github.io/gglyph/index.html","id":"gglyph-network-style-visualization-of-directed-pairwise-relationships-","dir":"","previous_headings":"","what":"Network-Style Visualization Of Directed Pairwise Relationships","title":"Network-Style Visualization Of Directed Pairwise Relationships","text":"gglyph provides tools creating network-style visualizations directed pairwise relationships using custom edge glyphs built top ggplot2. Please note package two licenses: MIT code CC 4.0 data","code":""},{"path":"https://valentinsvelev.github.io/gglyph/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network-Style Visualization Of Directed Pairwise Relationships","text":"can install development version GitHub:","code":"install.packages(\"devtools\") devtools::install_github(\"valentinsvelev/gglyph\")"},{"path":"https://valentinsvelev.github.io/gglyph/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Network-Style Visualization Of Directed Pairwise Relationships","text":"can use package real data follows: first generating mock data:","code":"library(gglyph)  data <- process_data_statistical(df)  ggplot(data = data) +   geom_glpyh() library(gglyph)  data <- generate_mock_data(n_nodes = 5, n_edges = 10)  ggplot(data = data) +   geom_glpyh()"},{"path":"https://valentinsvelev.github.io/gglyph/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Network-Style Visualization Of Directed Pairwise Relationships","text":"cite package use: LaTeX users:","code":"citation(\"gglyph\") Velev, V., & Spitz, A. (2025). gglyph: Network-Style Visualization Of Directed Pairwise Relationships. R package version 0.0.0.9000. https://github.com/valentinsvelev/gglyph @Manual{,   title = {{gglyph: Network-Style Visualization Of Directed Pairwise Relationships}},   author = {Velev, Valentin and Spitz, Andreas},   year = {2021},   note = {R package version 0.0.0.9000},   url = {https://github.com/valentinsvelev/gglyph} }"},{"path":"https://valentinsvelev.github.io/gglyph/reference/generate_mock_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","title":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","text":"Generates custom mock data passed gglyph::geom_glyph().","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/generate_mock_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","text":"","code":"generate_mock_data(   n_nodes = 5,   n_edges = 7,   n_groups = 1,   statistical = FALSE,   p_threshold = 0.05 )"},{"path":"https://valentinsvelev.github.io/gglyph/reference/generate_mock_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","text":"n_nodes Number nodes graph. Default 5. n_edges Number edges generate. Default 7. n_groups Number groups (faceting). Default 1 (ungrouped). statistical TRUE, generates mock p-values edges. Default FALSE. p_threshold significance threshold filtering edges. Default 0.05.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/generate_mock_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","text":"data frame mock data nodes edges.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/generate_mock_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate mock data for gglyph::geom_glyph() — generate_mock_data","text":"","code":"if (FALSE) { # \\dontrun{ ######################## # For non-grouped data # ########################  mock_data <- generate_mock_data(   n_nodes = 5,   n_edges = 7,   n_groups = 1,   statistical = FALSE,   p_threshold = 0.05 )  #################### # For grouped data # ####################  mock_data <- generate_mock_data(   n_nodes = 5,   n_edges = 7,   n_groups = 3,   statistical = TRUE,   p_threshold = 0.05 ) } # }"},{"path":"https://valentinsvelev.github.io/gglyph/reference/geom_glyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a directed network-style graph — geom_glyph","title":"Create a directed network-style graph — geom_glyph","text":"Create network-style graph illustrates directed pairwise relationships using custom edges.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/geom_glyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a directed network-style graph — geom_glyph","text":"","code":"geom_glyph(   mapping = NULL,   data = NULL,   edge_size = 1,   edge_colour = \"grey\",   edge_fill = NULL,   edge_alpha = 1,   node_size = 1,   node_colour = \"black\",   node_fill = NULL,   node_alpha = 1,   node_shape = 21,   node_spacing = 1,   label_size = 12,   group_label_size = 13,   legend_title = NULL,   legend_subtitle = NULL,   ...,   stat = \"identity\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE )"},{"path":"https://valentinsvelev.github.io/gglyph/reference/geom_glyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a directed network-style graph — geom_glyph","text":"mapping Set aesthetic mappings created aes(). must supply mapping plot mapping. data DataFrame preprocessed data either gglyph::preprocess_data_general() gglyph::preprocess_data_statistical(). passed ggplot2::ggplot(). edge_size numeric scaling factor indicating size/width edges. Default 1. edge_colour Color(s) edge outlines. Can single string (non-grouped data) vector strings function (grouped data). Default \"grey\". edge_fill Color(s) edge fill. Can single string, vector strings, color function. NULL, defaults edge_colour. edge_alpha numeric value indicating transparency edges. Default 1. node_size numeric value indicating size nodes. Default 8. node_colour Color(s) node outlines. Can single string (non-grouped data) vector strings function (grouped data). Default \"black\". node_fill Color node fill. NULL, defaults node_colour. node_alpha numeric value indicating transparency nodes. Default 1. node_shape numeric value specifying shape nodes, following ggplot2's shape specifications. Default 21 (circle border). node_spacing numeric scaling factor distance nodes. Values > 1 push nodes apart, values < 1 bring closer. Default 1. label_size numeric value indicating size node labels. Default 12. group_label_size numeric value indicating size group label. Default 13. legend_title Title legend string. legend_subtitle Subtitle legend string. ... Additional arguments passed ggplot2 layer. stat statistical transformation use data layer. position position adjustment use data layer. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend layer included legends? Default TRUE. inherit.aes FALSE, overrides default aesthetics, rather combining . Default FALSE.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/geom_glyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a directed network-style graph — geom_glyph","text":"ggplot2 layer custom network-based graph.","code":""},{"path":[]},{"path":"https://valentinsvelev.github.io/gglyph/reference/geom_glyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a directed network-style graph — geom_glyph","text":"","code":"if (FALSE) { # \\dontrun{ ################################## # For non-grouped/-facetted plot # ##################################  ggplot(data = data) +   geom_glyph()  ggplot(data = data) +   geom_glyph(edge_colour = \"purple\", node_colour = \"blue\")  ggplot(data = data) +   geom_glyph(edge_colour = \"purple\", node_colour = \"blue\") +   labs(title = \"A beautiful glyph\")  ############################# # For grouped/facetted plot # #############################  ggplot(data = data) +   geom_glyph() +   facet_wrap(~ group)  ggplot(data = data) +   geom_glyph(edge_colour = viridis, node_colour = viridis) +   facet_wrap(~ group)  ggplot(data = data) +   geom_glyph(edge_colour = viridis, node_colour = viridis) +   facet_wrap(~ group) +   labs(title = \"Beautiful glyphs\")   } # }"},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"PISA 2022 Subset — pisa2022_subset","title":"PISA 2022 Subset — pisa2022_subset","text":"subset PISA 2022 data.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PISA 2022 Subset — pisa2022_subset","text":"","code":"data(pisa2022_subset)"},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PISA 2022 Subset — pisa2022_subset","text":"data frame 189,966 rows 3 variables: CNT Country respondent (character). HISCED Highest educational level (ISCED) attained parents respondent (integer). MATH Math score respondent (numeric).","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"PISA 2022 Subset — pisa2022_subset","text":"Data obtained : OECD (2023). PISA 2022 Database [Data Set]. Zenodo. doi:10.5281/zenodo.13382904 Licensed CC 4.0: https://creativecommons.org/licenses//4.0/","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PISA 2022 Subset — pisa2022_subset","text":"Additional references reading: OECD (2024). PISA 2022 Technical Report. OECD Publishing, Paris. doi:10.1787/01820d6d-en OECD (2024). Programme International Student Assessment (PISA). https://www.oecd.org/en//programmes/pisa.html","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/pisa2022_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PISA 2022 Subset — pisa2022_subset","text":"","code":"data(pisa2022_subset) head(pisa2022_subset) #> # A tibble: 6 × 3 #>   CNT     HISCED       MATH #>   <chr>   <chr>       <dbl> #> 1 Austria ISCED 3.4-4  659. #> 2 Austria ISCED 5-6    499. #> 3 Austria ISCED 7-8    435. #> 4 Austria ISCED 5-6    536. #> 5 Austria ISCED 2-3.3  432. #> 6 Austria ISCED 2-3.3  426."},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_general.html","id":null,"dir":"Reference","previous_headings":"","what":"Process general/non-statistical data — process_data_general","title":"Process general/non-statistical data — process_data_general","text":"Prepare general/non-statistical data plotting gglyph::geom_glyph().","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_general.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process general/non-statistical data — process_data_general","text":"","code":"process_data_general(data, from, to, group = NULL)"},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_general.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process general/non-statistical data — process_data_general","text":"data DataFrame tibble containing input data processed. string indicating column name start nodes. string indicating column name end nodes. group string indicating column name grouping variable.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_general.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process general/non-statistical data — process_data_general","text":"DataFrame preprocessed data passed gglyph::geom_glyph().","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_general.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process general/non-statistical data — process_data_general","text":"","code":"if (FALSE) { # \\dontrun{ ######################## # For non-grouped data # ########################  processed_data <- process_data_general(   data = data,   from = \"from\",   to = \"to\" )  #################### # For grouped data # ####################  processed_data <- process_data_general(   data = data,   from = \"from\",   to = \"to\",   group = \"group\" ) } # }"},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_statistical.html","id":null,"dir":"Reference","previous_headings":"","what":"Process statistical data — process_data_statistical","title":"Process statistical data — process_data_statistical","text":"Prepare statistical data plotting gglyph::geom_glyph().","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_statistical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process statistical data — process_data_statistical","text":"","code":"process_data_statistical(data, from, to, group = NULL, sig, thresh = 0.05)"},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_statistical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process statistical data — process_data_statistical","text":"data DataFrame tibble containing input data processed. string indicating column name start nodes. string indicating column name end nodes. group string indicating column name grouping variable. sig string indicating column name significance level. thresh single number indicating significance threshold. Default 0.05.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_statistical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process statistical data — process_data_statistical","text":"DataFrame preprocessed data passed gglyph::geom_glyph().","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/process_data_statistical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process statistical data — process_data_statistical","text":"","code":"if (FALSE) { # \\dontrun{ ######################## # For non-grouped data # ########################  processed_data <- process_data_statistical(   data = data,   from = \"from\",   to = \"to\",   sig = \"significance\",   thresh = 0.05 )  #################### # For grouped data # ####################  processed_data <- process_data_statistical(   data = data,   from = \"from\",   to = \"to\",   sig = \"significance\",   group = \"group\",   thresh = 0.05 ) } # }"},{"path":"https://valentinsvelev.github.io/gglyph/reference/sipri_milex1949_2023_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","title":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","text":"subset SIPRI Military Expenditure 1949-2023 data.","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/sipri_milex1949_2023_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","text":"","code":"data(sipri_milex1949_2023_subset)"},{"path":"https://valentinsvelev.github.io/gglyph/reference/sipri_milex1949_2023_subset.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","text":"data frame 48 rows 3 variables: Country Country name (character). Year Year (integer). Spending Military spending current US dollars (numeric).","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/sipri_milex1949_2023_subset.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","text":"Data obtained : SIPRI (2025). SIPRI Military Expenditure Database [Data Set]. doi:10.55163/CQGC9685 Licensed CC 4.0: https://creativecommons.org/licenses//4.0/","code":""},{"path":"https://valentinsvelev.github.io/gglyph/reference/sipri_milex1949_2023_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SIPRI Military Expenditure 1949-2023 (Subset) — sipri_milex1949_2023_subset","text":"","code":"data(sipri_milex1949_2023_subset) head(sipri_milex1949_2023_subset) #> # A tibble: 6 × 3 #>   Country  Year Spending #>   <chr>   <dbl>    <dbl> #> 1 India    1995    9754. #> 2 India    1999   13896. #> 3 India    2003   16334. #> 4 India    2007   28255. #> 5 India    2011   49634. #> 6 India    2015   51295."},{"path":[]},{"path":"https://valentinsvelev.github.io/gglyph/news/index.html","id":"version-pre-release-development-version","dir":"Changelog","previous_headings":"","what":"version 0.0.0.9000 (pre-release)","title":"gglyph (development version)","text":"Pre-release Includes working version might bugs","code":""}]
